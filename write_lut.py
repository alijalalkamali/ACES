import os.path
import datetime
import create3DLUT
import sys
sys.path.append('/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/CLF_master/python/aces/clf')
from aces import clf, lutFormats

"""
	title::
			write_lut

	description::
		This method takes in parameters includes 1D and 3D LUT arrays and writes them to different
		lut file types.

	attributes::
		lut_type = desired LUT file type ('cube', 'cub', 'clf', 'csp')
		lut_3D = array of 3D LUT nodes (3, lut_size^3)
		lut_1D_exists = True (if there is a 1D LUT to include) or False (if there is not a 1D LUT to include)
		lut_name = filname for LUT
		lut_size = size of 3D LUT (17,65,etc)
		lut_min = minimum value of LUT
		lut_max = maximum value of LUT
		lut_1D = None (default) or set equal to 1D LUT array

	author::
		Emily Faw
		20170824


*** disclaimer: clf and cub need to be edited. 
"""


def write_lut(lut_type, lut_3D, lut_1D_exists, lut_name, lut_size, lut_min, lut_max, lut_1D=None):

	time = str(datetime.datetime.now)

	if lut_type == 'cube':

		filename = os.path.join(lut_name + "." + lut_type)

		f = open(filename, "w+")
		f.write('# DaVinci Resolve Cube\n')
		f.write('# Made from ' + filename + ' by Me\n')
		f.write('# Generated on %s \n' %(datetime.datetime.now())) 
		f.write('\n')
		f.write('LUT_3D_Size ' + str(lut_size) + '\n')
		f.write('LUT_3D_INPUT_RANGE ' + str(lut_min) + ' ' + str(lut_max)+ '\n')
		f.write('\n')

		if lut_1D_exists == True:
			for i in range(len(lut_1D)):
				f.write(str(lut_1D[i]) + '\n')
			f.write('\n')

		for i in range(lut_size**3):
			f.write(str(lut_3D[0,i]) + ' ' + str(lut_3D[1,i]) + ' ' + str(lut_3D[2,i]) + '\n')

	if lut_type == 'cub':

		filename = os.path.join (lut_name + "." + lut_type)

		f = open(filename, "w+")
		f.write('#@ Truelight Cube v2.1\n')
		#####################################FIND OUT WHAT THESE RESPRESENT
		f.write('#@ inLength 101\n')
		f.write('#@ lutLength 101\n')
		f.write('#@ iDims 3\n')
		f.write('#@ oDims 3\n')
		f.write('#@ width' + ' ' + str(lut_size) + ' ' + str(lut_size) + ' ' + str(lut_size) + '\n')
		f.write('\n')

		f.write('# inGamut\n')
		#write some lut here
		f.write('\n')

		f.write('# InputLut\n')
		#write some lut here
		f.write('\n')

		f.write('# Cube\n')
		for i in range(lut_size):
			f.write(str(lut_3D[0,i]) + ' ' + str(lut_3D[1,i]) + ' ' + str(lut_3D[2,i]) + '\n')

	if lut_type == 'clf':

		#####please fix me

		filename = os.path.join(lut_name + "." + lut_type)

		pl = clf.ProcessList()

		if lut_1D_exists==True:

			l1d1 = LUT1D(bitDepths["16f"], bitDepths["16f"], "someId", "Transform5")
			l1d1.setArray(lut_size, lut_1D)
			pl.addProcess(l1d1)

		l3d16 = clf.LUT3D("16f", "16f", "someId", "Transform")

		#not sure what these values should be
		indexMapR = [[0, 128, 1023], [0, 1, 2]]
		indexMapG = [[0, 768], [0, 1]]
		indexMapB = [[0, 64, 512, 1023], [0, 64, 128, 1023]]
		l3d16.setIndexMaps(indexMapR, indexMapG, indexMapB)
		l3d16.setArray([lut_size,lut_size,lut_size], lut_3D)
		pl.addProcess(l3d16)

		pl.writeFile(filename)


	###values between 0 and 1
	if lut_type == 'csp':

		filename = os.path.join(lut_name + "." + lut_type)

		f = open(filename, "w+")
		f.write('CSPLUTV100')
		f.write('3D')
		f.write('BEGIN METADATA')
		f.write('Generated by AMPAS\n')
		f.write('END METADATA')

		f.write('2\n')
		f.write('0.0000 1.0000\n 0 1')
		f.write('0.0, 1.0\n')
		f.write('2\n')
		f.write('0.0000 1.0000\n 0 1')
		f.write('0.0 1.0\n')
		f.write('2\n')
		f.write('0.0000 1.0000\n 0 1')
		f.write('0.0 1.0\n\n')

		for i in range(lut_size):
			f.write(str(lut_3D[0,i]) + ' ' + str(lut_3D[1,i]) + ' ' + str(lut_3D[2,i]) + '\n')

if __name__ == '__main__':
	import create3DLUT

	lut_type = 'clf'
	lut_3D = create3DLUT.design_3D_lut(17, 'p3', 'acescct', 'cube')
	print(lut_3D.shape)
	lut_1D_exists = False
	lut_name = 'test_clf_20170823'
	lut_size = 17
	lut_min = 0
	lut_max = 1

	dst = write_lut(lut_type, lut_3D, lut_1D_exists, lut_name, lut_size, lut_min, lut_max, lut_1D=None)






